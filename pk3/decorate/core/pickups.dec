const int PICKUP_DISPLAY = 288;
const int PICKUP_PICKUP  = 289;
const int PICKUP_DROPPED = 291;

// Arguments for PICKUP_DISPLAY:
//  - arg0: Item index. Specified through Damage here.
//  - arg1: Whether the pickup's dropped or not.


// Just used for incrementing armor. Has no value on its own.
actor Pickup_OneArmor: BasicArmorBonus
{
    Armor.SavePercent   0
    Armor.SaveAmount    1
    Armor.MaxSaveAmount 0x7FFFFFFF
}

actor Class_KickedToClientside: Inventory
{
    Inventory.MaxAmount 1
    +UNDROPPABLE
}

actor ClassBasedPickup: CustomInventory
{
    +QUIET
    +AUTOACTIVATE
    +SYNCHRONIZED
    Inventory.PickupMessage ""
    Inventory.MaxAmount 0

    // Can't use either of these in the pickup states because fug u :^))))
    var int user_index;
    var int user_dropped;

    Damage 0

    States
    {
      Spawn:
        TNT1 A 0
        goto DropCheck

      DropCheck:
        TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(PICKUP_DROPPED) != 0, "Dropped")
        goto Display

      Dropped:
        goto Display

      Display:
        TNT1 A 35 ACS_ExecuteAlways(PICKUP_DISPLAY, 0, user_index, user_dropped)
        wait

      Unknown:
        TNT1 A -1
        stop

      PickedUp:
        // This is just here so that 'stop' actually works.
        TNT1 A 0 A_ChangeFlag("ROCKETTRAIL", 0)
        stop

      NotPickedUp:
        TNT1 A 0
        fail
    }
}
